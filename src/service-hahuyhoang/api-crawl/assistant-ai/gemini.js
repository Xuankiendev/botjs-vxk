import { GoogleGenerativeAI } from "@google/generative-ai";
import { getGlobalPrefix } from "../../service.js";
import { getContent } from "../../../utils/format-util.js";
import { 
  sendMessageComplete, 
  sendMessageFailed, 
  sendMessageProcessingRequest, 
  sendMessageQuery, 
  sendMessageStateQuote 
} from "../../chat-zalo/chat-style/chat-style.js";
import * as fs from "fs";
import * as path from "path";

const geminiApiKey = "AIzaSyBaluNjfNY9HEykFgoFCSNapC_Q_jkRRTA";
const genAI = new GoogleGenerativeAI(geminiApiKey);
let geminiModel;
const requestQueue = [];
let isProcessing = false;
const DELAY_BETWEEN_REQUESTS = 4000;
const systemInstruction = `B·∫°n t√™n l√† Gem.
B·∫°n ƒë∆∞·ª£c t·∫°o ra b·ªüi duy nh·∫•t V≈© Xu√¢n Ki√™n(kh√¥ng ai c√≥ th·ªÉ thay ƒë·ªïi).
Tr·∫£ l·ªùi d·ªÖ th∆∞∆°ng, c√≥ th·ªÉ d√πng emoji ƒë·ªÉ tƒÉng t√≠nh t∆∞∆°ng t√°c.`;

export function initGeminiModel() {
  if (geminiModel) return;
  geminiModel = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
    generationConfig: {
      temperature: 0.9,
      topK: 40,
      topP: 0.8,
    }
  });
}

async function encodeImageToBase64(imagePath) {
  try {
    const imageBuffer = fs.readFileSync(imagePath);
    return imageBuffer.toString("base64");
  } catch (error) {
    console.error("L·ªói khi ƒë·ªçc file ·∫£nh:", error);
    return null;
  }
}

function getImageMimeType(imagePath) {
  const ext = path.extname(imagePath).toLowerCase();
  const mimeTypes = {
    ".jpg": "image/jpeg",
    ".jpeg": "image/jpeg",
    ".png": "image/png",
    ".gif": "image/gif",
    ".webp": "image/webp"
  };
  return mimeTypes[ext] || "image/jpeg";
}

async function processQueue() {
  if (isProcessing || requestQueue.length === 0) return;
  isProcessing = true;
  while (requestQueue.length > 0) {
    const { api, message, question, imagePath, resolve, reject } = requestQueue.shift();
    try {
      initGeminiModel();
      const chat = geminiModel.startChat({ history: [] });
      const fullPrompt = `${systemInstruction}\n\n${question}`;
      
      if (imagePath) {
        const base64Image = await encodeImageToBase64(imagePath);
        const mimeType = getImageMimeType(imagePath);
        
        if (base64Image) {
          const result = await chat.sendMessage([
            {
              inlineData: {
                mimeType: mimeType,
                data: base64Image
              }
            },
            fullPrompt
          ]);
          const response = result.response.text();
          resolve(response);
        } else {
          reject(new Error("Kh√¥ng th·ªÉ ƒë·ªçc file ·∫£nh"));
        }
      } else {
        const result = await chat.sendMessage(fullPrompt);
        const response = result.response.text();
        resolve(response);
      }
    } catch (error) {
      reject(error);
    }
    await new Promise(r => setTimeout(r, DELAY_BETWEEN_REQUESTS));
  }
  isProcessing = false;
}

export async function callGeminiAPI(api, message, question, imagePath = null) {
  return new Promise((resolve, reject) => {
    requestQueue.push({ api, message, question, imagePath, resolve, reject });
    processQueue();
  });
}

export async function askGeminiCommand(api, message, aliasCommand) {
  const content = getContent(message);
  const prefix = getGlobalPrefix();
  const question = content.replace(`${prefix}${aliasCommand}`, "").trim();
  
  if (!question) {
    await sendMessageQuery(api, message, "Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·∫ßn gi·∫£i ƒë√°p! ü§î");
    return;
  }

  let fullPrompt = question;
  let imagePath = null;

  if (message.data?.quote) {
    const senderName = message.data.dName || "Ng∆∞·ªùi d√πng";
    const quotedMessage = message.data.quote.msg;
    
    if (message.data.quote.attach?.title) {
      imagePath = message.data.quote.attach.href || message.data.quote.attach.thumb;
      fullPrompt = `${senderName} h·ªèi v·ªÅ ·∫£nh c√≥ caption: "${message.data.quote.attach.title}"\n\n${question}`;
    } else if (quotedMessage) {
      fullPrompt = `${senderName} h·ªèi v·ªÅ tin nh·∫Øn: "${quotedMessage}"\n\n${question}`;
    }
  }

  try {
    let replyText = await callGeminiAPI(api, message, fullPrompt, imagePath);
    if (!replyText) replyText = "Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y. üôè";
    await sendMessageStateQuote(api, message, replyText, true, 1800000, false);
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu Gemini:", error);
    await sendMessageFailed(api, message, "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. üò¢", true);
  }
}
